#! /usr/bin/env python

"""
Extract activation from DNN
"""

import argparse
import numpy as np

from dnnbrain.dnn.core import DNN, Stimulus, Mask


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-net',
                        metavar='Net',
                        required=True,
                        type=str,
                        help='a neural network name')
    parser.add_argument('-layer',
                        metavar='Layer',
                        type=str,
                        nargs='+',
                        help="names of the layers used to specify where activation is extracted from "
                             "For example, 'conv1' represents the first convolution layer, and "
                             "'fc1' represents the first full connection layer. ")
    parser.add_argument('-dmask',
                        metavar='DnnMask',
                        type=str,
                        help='a .dmask.csv file in which layers of interest are listed '
                             'with their own channels or columns of interest.')
    parser.add_argument('-stim',
                        metavar='Stimulus',
                        required=True,
                        type=str,
                        help='a .stim.csv file which contains stimulus information')
    parser.add_argument('-out',
                        metavar='Output',
                        required=True,
                        type=str,
                        help='an output filename with suffix .act.h5')
    args = parser.parse_args()
    assert np.logical_xor(args.layer is None, args.dmask is None), \
        'Use one and only one of the -layer and -dmask!'

    # -load DNN-
    dnn = DNN(args.net)

    # -load stimuli-
    stimuli = Stimulus(args.stim)

    # -load mask-
    dmask = Mask()
    if args.layer is not None:
        for layer in args.layer:
            dmask.set(layer)
    else:
        dmask.load(args.dmask)

    # -extract activation-
    activation = dnn.compute_activation(stimuli, dmask)
    activation.save(args.out)


if __name__ == '__main__':
    main()
