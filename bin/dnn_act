#! /usr/bin/env python

"""
Extract activation from DNN
"""

import argparse

from dnnbrain.dnn.core import Stimulus
from dnnbrain.utils.util import gen_dmask
from dnnbrain.dnn import models as db_models  # used by eval


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-net',
                        metavar='Net',
                        required=True,
                        type=str,
                        choices=('AlexNet',),
                        help='a neural network name')
    parser.add_argument('-layer',
                        metavar='Layer',
                        type=str,
                        nargs='+',
                        help="names of the layers used to specify where activation is extracted from "
                             "For example, 'conv1' represents the first convolution layer, and "
                             "'fc1' represents the first full connection layer. ")
    parser.add_argument('-chn',
                        metavar='Channel',
                        type=int,
                        nargs='+',
                        help="Channel numbers used to specify where activation is extracted from "
                             "Default is extracting all channels of each layer specified by -layer.")
    parser.add_argument('-dmask',
                        metavar='DnnMask',
                        type=str,
                        help='a .dmask.csv file in which layers of interest are listed '
                             'with their own channels, rows and columns of interest.')
    parser.add_argument('-stim',
                        metavar='Stimulus',
                        required=True,
                        type=str,
                        help='a .stim.csv file which contains stimulus information')
    parser.add_argument('-pool',
                        metavar='Pooling',
                        type=str,
                        choices=('max', 'mean', 'median', 'L1', 'L2'),
                        help='Pooling method: '
                             'max: max pooling; '
                             'mean: mean pooling; '
                             'median: median pooling; '
                             'L1: 1-norm; '
                             'L2: 2-norm.')
    parser.add_argument('-out',
                        metavar='Output',
                        required=True,
                        type=str,
                        help='an output filename with suffix .act.h5')
    args = parser.parse_args()

    dnn = eval('db_models.{}()'.format(args.net))  # load DNN

    # load stimuli
    stimuli = Stimulus()
    stimuli.load(args.stim)

    # generate DNN mask
    channels = 'all' if args.chn is None else args.chn
    dmask = gen_dmask(args.layer, channels, args.dmask)

    # -extract activation-
    activation = dnn.compute_activation(stimuli, dmask, args.pool)
    activation.save(args.out)


if __name__ == '__main__':
    main()
