#! /usr/bin/env python

import argparse
from torchvision import transforms
from torch.utils.data import DataLoader
from dnnbrain.dnn import analyzer
from dnnbrain.dnn import io as dnn_io

def main():
    
    """ Extract activation of a pretrained network for a set of stimuli, and 
    save it to a specified file 
    """
    
    parser = argparse.ArgumentParser(description='Extract activation of \
                                     a pretrained network for a set of stimuli,\
                                     and save it to a specified file')
    parser.add_argument('-net',
                        type=str,
                        required=True,
                        metavar='PretrainedNetName',
                        help='Pretrained convolutional network name')
    parser.add_argument('-stim',
                        type=str,
                        required=True,
                        metavar='A csv file lists info for stimuli of interest',
                        help='The file provide info of inuput stimuli images.\
                        It lists stimlus ID, training conditions, onset and duration \
                        of each stimulus. Please prepare the file following \
                        the instructions from the page. \
                        https: dnnbrain.csv')
    parser.add_argument('-layer',
                        type=str,
                        required=False,
                        metavar='Layer of interest',
                        help='Strings to indicate layer of interest. \
                        If no layers are provided, activation from all of layers \
                        will be extracted.')
    parser.add_argument('-out',
                        type=str,
                        required=True,
                        dest='file name for output activation',
                        metavar='Output file name',
                        help='output file name')
    args = parser.parse_args()

	# See below is the framework of this command 
	# ------------------------------------
	# Streamline
	# ------------------------------------
	# 1 Call activation extraction from 'core' to get CNN's activations. Parameters: -net, -in, -layer, -channel
	# 2 Save activation data and picutre list to csv files. Parameters: -activation,-net, -out, -layer, -channel, -dnnpicname
	
	# DNN activation extraction 
    netloader = dnn_io.NetLoader(args.net)
    imgcropsize = netloader.img_size
    transform = transforms.Compose([transforms.Resize(imgcropsize),
                                    transforms.ToTensor()])                            
    picdataset = dnn_io.PicDataset(args.stim, transform=transform)
    picdataloader = DataLoader(picdataset, batch_size=8, shuffle=False)
    dnn_act = analyzer.dnn_activation(picdataloader, args.net, args.layer, args.channel)
	# I think it is a good idea to decompose the analyzer.dnn_activation into 
    # three basic elemet, 1) load network, 2, load image, 3, compute activation
    # these three function is very basic. it will be used everywhere in dnnbrain.
    # Save activation data
    dnn_io.save_activation(dnn_act,args.outdir)

if __name__ == '__main__':

    main()