#! /usr/bin/env python

"""
Estimate receptive field using slide-window(sw) occulding method 
for interested channels. The method work for both conv and fc layers
"""

import argparse


def main():
    
    parser = argparse.ArgumentParser(description='Estimate receptive field for '
                                     'interested channels using its top stimuli')
    parser.add_argument('-net',
                        type = str,
                        required = True,
                        metavar='Name of target DNN',
                        choices=['alexnet','vgg11','vgg16','vgg19'],
                        help = 'Name of interested DNN')
    parser.add_argument('-layer',
                        nargs='+',
                        metavar='Layer id list',
                        type=str,
                        help='Layers of interest. '
                             'conv, relu, pool, fc represents convolution, reLU, '
                             'pooling, and fc layer, respectively.The top stimulis '
                             'are selected for all layers and channels default.')
    parser.add_argument('-channel',
                        nargs='+',
                        metavar='Channel id list',
                        type=str,
                        help='Channel of interest.If no channels are specificied, '
                        'each channel will be processed. The layer and channel '
                        'should be paired together.')
    parser.add_argument('-stim',
                        type=str,
                        required=True,
                        metavar='A csv file lists top stimuli to be used to '
                        'estimate receptive field.',
                        help='The file provide path of the top stimuli images '
                        'used to estimate receptive field.')
    parser.add_argument('-dmask',
                        metavar='.dmask.csv dnnmask file',
                        required=True,
                        type=str,
                        help='A .dmask.csv file in which layers and channel of '
                        'interest are listed')
    parser.add_argument('-wsize',
                        metavar='Window size',
                        required=True,
                        help='Windows size in pixel unit. default is 5x5')
    parser.add_argument('-stride',
                        metavar='Stride in moving window',
                        required=True,
                        help='Stride used in moving windows')
    parser.add_argument('-dist',
                        metavar='Metric of discrpancy',
                        required=True,
                        choices=['max','mean','L1','L2'],
                        help='Discripancy metric to measure the differnce between '
                        'original activation and activation from occulding.')
    parser.add_argument('-outdir',
                        type = str,
                        required = True,
                        metavar='Outputdir',
                        help = 'Output directory to save RF images.')
    
    args = parser.parse_args()
    
        # prepare dmask
    if args.dmask is not None and args.layer is not None:
        raise exception('dmask and layer options cannot be used at the same time')
    if args.dmask is None and args.layer is None:
        raise exception('Please use dmask or layer and channel pair to  '
                        'specifiy target layers and channels')
           
    dmask = dio.DnnMask('mymask')
    if args.dmask is not None:
            dmask.load(args.dmask)
    else:
            dmask.set(layer,channel)
    
    # load stim
    stim = dio.Stim(args.stim)
    transform = dio.Transforms('resize',net.img_size)
    stim = ImgData(stim, transform)
    
    # make ooculded image for each stim
    stim_oc = stim.occulde(stim,kernel_size,stride)

    # calcualte difference map for each stim, and save it to disk
    net = analyzer.Net(args.net)
    for s in stim:
        act = net.test(stim, dmask) 
        dm = act(1:end) - act(0)
        dm = pooling(dm,metric)
        dm.save('myfile')


    
    
if __name__ == '__main__':
    main()
