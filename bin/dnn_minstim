#! /usr/bin/env python
import os, argparse,time
from os.path import exists as pexist
import matplotlib.pyplot as plt

from dnnbrain.dnn.core import Mask,Stimulus
from dnnbrain.dnn import models as db_models
from dnnbrain.dnn.algo_mi import MinmalParcelImage

"""
Simplify a stimulus into a minimal part which could cause equivalent activation
as the raw stimlus in intereseted channels
"""

def main():
    parser = argparse.ArgumentParser(description='Simplify a stimulus into ' 
                                     'a minimal part which could cause equivalent '
                                     'activation as the original stimlus '
                                     'in intereseted channels')
    parser.add_argument('-net',
                        type = str,
                        required = True,
                        metavar='Name of target DNN',
                        choices=['AlexNet','vgg11','vgg16','vgg19'],
                        help = 'Name of interested DNN')
    parser.add_argument('-stim',
                        type=str,
                        required=True,
                        metavar='A csv file lists top stimuli to be simplyfied.',
                        help='The file provide path of the top stimuli images '
                        'to be simplified.')
    parser.add_argument('-dmask',
                        metavar='.dmask.csv dnnmask file',
                        required=True,
                        type=str,
                        help='A .dmask.csv file in which layers and channel of '
                        'interest are listed')
    parser.add_argument('-out',
                        type = str,
                        required = True,
                        metavar='Outputdir',
                        help = 'Output directory to save the simplfied image, ' 
                        'and associated act.hd5 activation file.')   
    args = parser.parse_args()
    
    # Load net/stim/dmask
    dnn = eval('db_models.{}()'.format(args.net))
    stim = Stimulus(args.stim)
    dmask = Mask(args.dmask)

    #get layer/chn
    layer = dmask.layers[0]
    mask = dmask.get(layer)
    chn  = mask.get('chn')[0]

    # Create output file if inexistent
    if not pexist(args.out):
        os.mkdir(args.out)
    
    #Create the minimal image class
    minimal_image = MinmalParcelImage(dnn, args.dmask)
    
    #generate the minimal image
    image_min = minimal_image.compute(stim)
    
    #save the minimal image
    order = 1
    for image in image_min:
        plt.imsave(args.out+str(layer)+'_chn'+str(chn)+'_'+str(order)+'.jpg',image)
        plt.axis('off')
        order+=1
    
if __name__ == '__main__':
    time_start = time.time()
    main()
    time_end = time.time()
    print("Completed all!time cost: %.4f s" % (time_end - time_start))