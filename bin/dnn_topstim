# -*- coding: utf-8 -*-
#! /usr/bin/env python

"""
Select top stimuli from provided stimuli for interested layer and channel from
a DNN network.

"""
import numpy as np
import csv,os,sys,argparse, h5py
from torchvision import transforms
from torch.utils.data import DataLoader
from dnnbrain.utils.io import read_stim_csv
from dnnbrain.dnn.io import NetLoader, PicDataset
from dnnbrain.dnn.analyzer import dnn_activation

def main():

    parser = argparse.ArgumentParser(description = 'Select top stimuli from '
                                     'a set of stimuli for interested layers & channel.')

    parser.add_argument('-net',
                        metavar = 'Name of interested DNN',
                        type = str,
                        required = True,
                        help = 'Name of interested DNN net')

    parser.add_argument('-top',
                        metavar = 'The number of stimuli to be selected',
                        type = int,
                        required = True,
                        help = 'Top N stimuli will be selected.')

    parser.add_argument('-stim',
                        type = str,
                        required = True,
                        metavar = 'A csv file lists info for stimuli of interest',
                        help = 'The file provide info of inuput stimuli images from '
                        'which the top stimuli will be selected.')

    parser.add_argument('-act',
                        metavar = 'DNN .act.h5 file',
                        type = str,
                        required = False,
                        help = 'DNN activation file. If activation file is input '
                        'the top stimuli are selected on it. Otherwise, the activation  '
                        'will be directly computed on the listed stimlui')

    parser.add_argument('-layer',
                        nargs = '+',
                        metavar = 'Layer',
                        type = str,
                        required = False,
                        help = 'Layers of interest. '
                                'conv, relu, pool, fc represents convolution, reLU, '
                                'pooling, and full connection layer, respectively.'
                                'Default, the top stimulis are selected for '
                                'all layers and all channels.')

    parser.add_argument('-channel',
                        nargs = '+',
                        metavar = 'Channel id list',
                        type = int,
                        required = False,
                        help = "Channel of interest. ")

    parser.add_argument('-dmask',
                        metavar = '.dmask.csv dnnmask file',
                        required = False,
                        type = str,
                        help = "A *.dmask.csv list of interested layers and channels. " )

    # The option layer and channle is exclusive to the dbmask. If layer and channel
    # The user can not use the two set of parameters at the same time.

    parser.add_argument('-outdir',
                        metavar='Output dir to save the top stimulus for '
                        'interested layers and channels, and assocaited '
                        'topact.hd5 file',
                        required = True,
                        type = str,
                        help = 'an output stim.hd5 file')

    args = parser.parse_args()

#    args.net = 'alexnet'
#        # str, yes
#    args.top = 4
#        # int(list), yes
#    args.stim = 'img.stim.csv'
#        # str, yes
#    args.act = None
#        # str, no/yes
#    args.layer = ['conv5', 'conv5']
#        # str(list), no if args.dmask exists
#    args.channel = [13,12]
#        # int(list), no if args.dmask exists
#    args.dmask = 'test.dmask.csv'
#        # str, no if args.layer,args.channel exist (dmask优先于layer&channel)
#    args.outdir = 'generated'
#        # str, yes

    if not os.path.exists(args.outdir):
        os.mkdir(args.outdir)

    net_loader = NetLoader(args.net)
    transform = transforms.Compose([transforms.Resize(net_loader.img_size), transforms.ToTensor()])

    stim_dict = read_stim_csv(args.stim)
    dataset = PicDataset(stim_dict['path'], stim_dict['stim']['stimID'], transform=transform)
    data_loader = DataLoader(dataset, batch_size=10, shuffle=False)

    if args.dmask == None:
        lychlist = list(zip(args.layer,args.channel))
    else:
        f = open(args.dmask, 'r')
        csvreader = csv.reader(f)
        lychlist = list(csvreader)

    for t in lychlist:
        layer,channel = t[0],int(t[1])
        if args.act == None:
            tmpact = args.outdir + '/stinfo'+'_top_'+str(args.top)+'_ly_'+layer+'_ch_'+str(channel)+'.h5'
            f = h5py.File(tmpact, 'w')
            dnn_acts, raw_shape = dnn_activation(data_loader, net_loader,layer)
            dset = f.create_dataset(layer, data = dnn_acts)
            dset.attrs['raw_shape'] = raw_shape
            f.attrs['title'] = args.net + 'activation'
            f.attrs['cmd'] = ' '.join(sys.argv)
            f.close()
        else:
            tmpact = args.act
        f = h5py.File(tmpact, 'r')
        dnn_acts = f[layer][:]
        f.close()
        Nsize = int(np.sqrt(dnn_acts.shape[2]))
        countTOP = np.zeros([1, dnn_acts.shape[0]], dtype = float, order = 'C')
        for whichpic in range(1, dnn_acts.shape[0]+1):
        	dnnRawMap = np.array(dnn_acts[whichpic-1,channel-1,]).reshape(Nsize,Nsize)
        	countTOP[0,whichpic-1] = np.sum(dnnRawMap)
        	print(whichpic)
        topK = np.argsort(countTOP)+1
        topK = topK[0,::-1]
        f = open(args.outdir + '/top'+str(args.top)+'_ly_'+layer+'_ch_'+str(channel)+'.stim.csv','w+')
        f.write('title=picture stimuli\r')
        f.write('type=picture\r')
        f.write('path=D:\code\DNN-Brain\r')
        f.write('stim=stimID,condition\r')
        f.write('meas=\r')
        for i in range(0,args.top):
        	f.write('img\pic'+str(topK[i])+'.jpg,XXX\r')
        f.close()

if __name__ == '__main__':
    main()
    print('completed.')
