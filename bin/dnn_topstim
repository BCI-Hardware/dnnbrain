#! /usr/bin/env python
# -*- coding: utf-8 -*-

"""
Select top stimuli from provided stimuli for interested layer and channel from
a DNN network.

"""
import numpy as np
import csv,os,sys,argparse, h5py
from torchvision import transforms
from torch.utils.data import DataLoader
from dnnbrain.utils.io import read_stim_csv
from dnnbrain.dnn.io import NetLoader, PicDataset
from dnnbrain.dnn.analyzer import dnn_activation

def main():

    parser = argparse.ArgumentParser(description = 'Select top stimuli from '
                                     'a set of stimuli for interested layers & channel.')

    parser.add_argument('-net',
                        metavar = 'Name of interested DNN',
                        type = str,
                        required = True,
                        help = 'Name of interested DNN net')

    parser.add_argument('-top',
                        metavar = 'The number of stimuli to be selected',
                        type = int,
                        required = True,
                        help = 'Top N stimuli will be selected.')

    parser.add_argument('-stim',
                        type = str,
                        required = True,
                        metavar = 'A csv file lists info for stimuli of interest',
                        help = 'The file provide info of inuput stimuli images from '
                        'which the top stimuli will be selected.')

    parser.add_argument('-act',
                        metavar = 'DNN .act.h5 file',
                        type = str,
                        required = False,
                        help = 'DNN activation file. If activation file is input '
                        'the top stimuli are selected on it. Otherwise, the activation  '
                        'will be directly computed on the listed stimlui')

    parser.add_argument('-layer',
                        nargs = '+',
                        metavar = 'Layer',
                        type = str,
                        required = False,
                        help = 'Layers of interest. '
                                'conv, relu, pool, fc represents convolution, reLU, '
                                'pooling, and full connection layer, respectively.'
                                'Default, the top stimulis are selected for '
                                'all layers and all channels.')

    parser.add_argument('-channel',
                        nargs = '+',
                        metavar = 'Channel id list',
                        type = int,
                        required = False,
                        help = "Channel of interest. ")

    parser.add_argument('-dmask',
                        metavar = '.dmask.csv dnnmask file',
                        required = False,
                        type = str,
                        help = "A *.dmask.csv list of interested layers and channels. " )
        
    parser.add_argument('-metric',
                        choice=('max', 'mean','L1','L2'),
                        required=True,
                        type = str,
                        help='Metric for channel activation.')

    parser.add_argument('-outdir',
                        metavar='Output dir to save the top stimulus for '
                        'interested layers and channels, and assocaited '
                        'topact.hd5 file',
                        required = True,
                        type = str,
                        help = 'an output stim.hd5 file')

    args = parser.parse_args()

    # load stimulus file
    stim_dict = read_stim_csv(args.stim)

    # prepare dmask
    if args.dmask is not None and args.layer is not None:
        raise exception('dmask and layer-channel cannot be input at the same time')
    if args.dmask is None and args.layer is None:
        raise exception('Please input dmask or layer and channel pair to  '
                        'specifiy interested layers and channels') 
    if args.dmask is not None:
            dmask_dict = dio.read_dmask_csv(args.dmask)
    else:
            dmask_dict = dio.dnn_index_comb(layer,channel)
            
    
    actwriter = ActWriter(outfile, title)
    csvwriter = CsvWriter(outfile, title)
    # if act is input, select top stimulus according to activation from act file 
    if args.act is not None:
        reader = dio.ActReader(os.path.join(args.out, title))
        for layer in dmask_dict.keys():
            act = reader.get_act(layer,channel) # get act from act file
            pool_act = dnn_pooling(act, args.metric) # pool act
            I = np.argsort(pool_act) # sort act
            topI = I(:args.top)
            actwriter.set_act(layer, act(topI,:)  # write act for top stimulus
            csvwriter(title, stim_dict(topI)) # write path csv for top stimulus
            
    # if act file is not provided, calculate act from dnn
    else:
        net = NetLoader(args.net)
        transform = transforms.Compose([transforms.Resize(net_loader.img_size), transforms.ToTensor()])
        imgset = ImgDataset(stim_dict['path'], stim_dict['stim']['stimID'], transform=transform)
        imgset = DataLoader(imgset, batch_size=10, shuffle=False)
        for layer in dmask_dict.keys():
            act = []
            for stims, _ in imgset:
                act.extend(dan.dnn_activation(stims, net.model, layer,channel))
            act = np.array(act)
            pool_act = dnn_pooling(act, args.metric)
            I = np.argsort(pool_act)
            topI = I(:args.top)
            actwriter.set_act(layer, act(topI,:)
            csvwriter(title, stim_dict(topI))
            
    actwriter.close()
    csvwriter.close()
            
            
if __name__ == '__main__':
    main()
    print('completed.')
