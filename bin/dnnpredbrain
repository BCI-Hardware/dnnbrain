#! /usr/bin/env python

"""
Use CNN activation to predict brain activation

Author: Taicheng Huang @ BNU
Email: taicheng_huang@mail.bnu.edu.cn
Reviewer:
"""

import os
import argparse
import subprocess
import numpy as np
import pandas as pd
from torch.utils.data import DataLoader
from torchvision import transforms
from scipy.spatial.distance import cdist
from dnnbrain.core import model_operation
from dnnbrain.utils import iofiles, base

try:
    from sklearn import linear_model, model_selection, decomposition
except ModuleNotFoundError:
    raise Exception('Please install sklearn in your workstation')
    

def main():
    parser = argparse.ArgumentParser(description='Use CNN activation to predict brain activation')
    parser.add_argument('-net',
                        type=str,
                        required=True,
                        metavar='NetName',
                        help='convolutional network name')
    parser.add_argument('-layer',
                        type=str,
                        required=True,
                        metavar='LayerName',
                        help='activation for specific layers, please input conv1 or fc1 for activation')
    parser.add_argument('-channel',
                        type=int,
                        required=False,
                        nargs='*',
                        metavar='Channel',
                        help='activation for specific channels')
    parser.add_argument('-stim',
                        type=str,
                        required=True,
                        dest='csv'
                        metavar='StimuliInfoFile',
                        help='table contains picture names, conditions and picture onset time.\
                                This csv_file helps us connect cnn activation to brain images.\
                                Please organize your information as:\
                                [PicPath]\
                                stimID     condition   onset(optional) measurement(optional)\
                                face1.png  face        1.1             3\
                                face2.png  face        3.1             5\
                                scene1.png scene       5.1             4'
                        )
    parser.add_argument('-brainact',
                        type=str,
                        required=True,
                        metavar='BrainActFile',
                        help='brain activation nifti/surface file,\
                                user should correspond brain image \
                                to picture stimuli before calling this\
                                script.')
    parser.add_argument('-mask',
                        type=str,
                        required=False,
                        metavar='MaskFile',
                        help='brain activation mask')
    parser.add_argument('-roi',
                        action='store_true',
                        help='Do ROI analysis or not.')
    parser.add_argument('-model',
                        type=str,
                        required=False,
                        metavar='BrainModel',
                        choices=['multivariate', 'univariate'],
                        help='model to predict brain activation by CNN activation, by default is multivariate.\
                              multivariate analysis calls lasso regression with default alpha = 1, and we will \
                              first decompose activation data of DNN into 200 dimension and then calculate \
                              explained variance by using cross validation. \
                              univariate analysis, we will do linear cross validation in each brain image voxel \
                              with each units and return the maximum explained variance as the explained variance \
                              of brain activation.')
    parser.add_argument('-cvfold',
                        type=int,
                        required=False,
                        default=2,
                        metavar='FoldNumber',
                        help='cross validation fold numbers')
    parser.add_argument('-out',
                        type=str,
                        required=True,
                        dest='OutputDir',
                        metavar='Output Directory',
                        help='output directory, output is a 4D brain image data with value in each voxel \
                              is explained_variance by linear_model, each volume is the prediction explained \
                              variance in each layer.')
    args = parser.parse_args()

	# See below is the framework of this command 
	# ------------------------------------
	# Streamline
	# ------------------------------------
	# 1 Call Yukun's code (activation extraction from 'core') to get CNN's activations. Parameters: -net, -in, -layer, -channel
	# 2 Extract brain activation from fMRI data (brainact and mask), and convert it as an array. Parameters: -brainact, -mask
	# 3 Iterately Call sklearn models to estimate accuracy. Parameters: -model, -cvfold.
	# 4 Map accuracy to Brain Images. Parameters: -out
	
	# DNN activation extraction 
    netloader = iofiles.NetLoader(args.net)
    imgcropsize = netloader.img_size
     
    transform = transforms.Compose([transforms.Resize(imgcropsize),
                                    transforms.ToTensor()])                            
    picdataset = iofiles.PicDataset(args.csv, transform=transform)
    picdataloader = DataLoader(picdataset, batch_size=8, shuffle=False)
    dnn_act = model_operation.dnn_activation(picdataloader, args.net, args.layer, args.channel)
    if dnn_act.ndim == 3:
        dnn_act = dnn_act[:,None,...]
        
    # Reshape dnn_act and flatten its unit
    channel_num = dnn_act.shape[1]
    dnn_act = dnn_act.reshape((dnn_act.shape[0], channel_num*dnn_act.shape[2]*dnn_act.shape[3]))

    
    # Brain image activation extraction
    brainimg_data_raw, header = iofiles.load_brainimg(args.brainact)
    if args.mask:
        assert os.path.basename(args.brainact).split('.')[1:] == os.path.basename(args.mask).split('.')[1:], "Brain activation and mask are mismatched."
        brainmask_data_raw, header = iofiles.load_brainimg(args.mask, ismask=True)
    else:
        brainmask_data_raw = np.ones(brainimg_data_raw.shape[1:])
    assert brainimg_data_raw.shape[1:] == brainmask_data_raw.shape, "Shape of brainact and mask need to be same."
    
    if args.roi:
        roilabel = np.unique(brainmask_data_raw)
        roilabel = roilabel[roilabel!=0]
        brainact_list = base.extract_brain_activation(brainimg_data_raw, brainmask_data_raw, roilabel).T
        actnode_num = len(roilabel)
    else:
        brainimg_data = brainimg_data_raw*brainmask_data_raw
        brainact_idx = np.transpose(np.where(brainmask_data_raw!=0))
        # Flatten brainimage as (npic * nvoxel) array
        brainact_list = np.zeros((brainimg_data_raw.shape[0], brainact_idx.shape[0]))
        for i, b_idx in enumerate(brainact_idx):
            brainact_list[:,i] = brainimg_data_raw[:, b_idx[0], b_idx[1], b_idx[2]]
        actnode_num = brainact_idx.shape[0]
	   
    # Initialize machine learning models
    if args.model == 'multivariate':
        model = linear_model.LinearRegression()
    
    score_array = np.zeros((1, actnode_num))
    # Multivariate regression analysis
    if args.model == 'multivariate':
        if dnn_act.shape[0] < 10:
            comp_num = dnn_act.shape[0]
        else:
            comp_num = 10
        pca = decomposition.PCA(n_components=comp_num)
        # nsamples(pics)*nfeatures(units)
        for j in range(actnode_num):
            if (j%100 == 0) & (not args.roi):
                print('  Finish calculation on {} voxels'.format(j))
            # nsamples(pics)*nfeatures(voxels)
            # Decrease dimension using PCA
            dnn_act_pca = pca.fit_transform(dnn_act)
            # Cross validation
            scores = model_selection.cross_val_score(model, dnn_act_pca, brainact_list[:,j][:,None], scoring='explained_variance', cv=args.cvfold)
            score_array[0, j] = np.mean(scores)
                
    # Univariate regression analysis
    # get the maximum value of explained_variance across all DNN units in a channel
    elif args.model == 'univariate':
        # nsamples(pics)*nfeatures(units)
        corr = 1.0 - cdist(dnn_act.T, brainact_list.T, metric='correlation')
        # Each layer's max correlation 
        maxcorr = np.max(corr,axis=0)
        # Assign correlation to brain image
        for j in range(actnode_num):
            score_array[0,j] = maxcorr[j]
    else:
        raise Exception('Not supported yet, please contact the author for implementation.')
    
    # Save output
    if args.roi:
        score_df = pd.DataFrame({'ROI':roilabel, 'scores':score_array.flatten()})
        # Save behavior measurement into hardware
        score_df.to_csv(args.outdir, index=False)
    else:
        # output image: channel*voxels
        out_brainimg = np.zeros((channel_num, *brainimg_data.shape[1:]))
        for i in range(channel_num):
            for j, b_idx in enumerate(brainact_idx):
                out_brainimg[i,b_idx[0], b_idx[1], b_idx[2]] = score_array[i,j]
        # Save image into hardware
        iofiles.save_brainimg(args.outdir, out_brainimg, header)


if __name__ == '__main__':
    main()
