#! /usr/bin/env python

"""
Characterise brain activation's representation dissimilarity matrix.
"""

import time
import argparse
import numpy as np

from scipy.spatial.distance import pdist
from dnnbrain.brain.io import load_brainimg
from dnnbrain.dnn.core import RDM


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-nif',
                        metavar='NeuroImageFile',
                        required=True,
                        type=str,
                        help='brain activation image')
    parser.add_argument('-bmask',
                        metavar='BrainMask',
                        required=True,
                        type=str,
                        help="Brain mask is used to extract activation locally.")
    parser.add_argument('-label',
                        metavar='Label',
                        required=False,
                        type=int,
                        nargs='+',
                        help="Specify which ROI labels in bmask will be used; "
                             "Default using all labels.")
    # parser.add_argument('-cate',
    #                     metavar='Category',
    #                     type=str,
    #                     help='a .stim.csv file which contains category information '
    #                          'If used, do rsa category-wise.')
    parser.add_argument('-metric',
                        metavar='Metric',
                        type=str,
                        default='euclidean',
                        help="Specify metric used to calculate distance.")
    parser.add_argument('-out',
                        metavar='Output',
                        required=True,
                        type=str,
                        help='an output filename with suffix .rdm.h5')
    args = parser.parse_args()

    # load neuroimaging data
    data, _ = load_brainimg(args.nif)
    bmask, _ = load_brainimg(args.bmask, ismask=True)
    if args.label is None:
        labels = np.unique(bmask)
        labels = labels[labels != 0]
    else:
        labels = args.label

    # calculate RDM
    rdm = RDM()
    rdm.rdm_type = 'bRDM'
    for label in labels:
        time1 = time.time()
        X = data[:, bmask == label]
        rdm_arr = pdist(X, metric=args.metric)
        rdm.set(str(label), rdm_arr, triu=True)
        print('Finished label{}: cost {} seconds'.format(
            label, time.time() - time1))

    # save
    rdm.save(args.out)


if __name__ == '__main__':
    main()
