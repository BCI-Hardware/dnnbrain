#! /usr/bin/env python
# -*- coding: utf-8 -*-

"""
Select top stimuli from provided stimuli for interested layer and channel from
a DNN network.

"""
import numpy as np
import csv,os,sys,argparse, h5py
from torchvision import transforms
from torch.utils.data import DataLoader
from dnnbrain.utils.io import read_stim_csv
from dnnbrain.dnn.io import NetLoader, PicDataset
from dnnbrain.dnn.analyzer import dnn_activation

def main():

    parser = argparse.ArgumentParser(description = 'Select top stimuli from '
                                     'a set of stimuli for interested layers & channel.')

    parser.add_argument('-net',
                        metavar = 'Name of interested DNN',
                        type = str,
                        required = True,
                        help = 'Name of interested DNN net')

    parser.add_argument('-top',
                        metavar = 'The number of stimuli to be selected',
                        type = int,
                        required = True,
                        help = 'Top N stimuli will be selected.')

    parser.add_argument('-stim',
                        type = str,
                        required = True,
                        metavar = 'A csv file lists info for stimuli of interest',
                        help = 'The file provide info of inuput stimuli images from '
                        'which the top stimuli will be selected.')

    parser.add_argument('-act',
                        metavar = 'DNN .act.h5 file',
                        type = str,
                        required = False,
                        help = 'DNN activation file. If activation file is input '
                        'the top stimuli are selected on it. Otherwise, the activation  '
                        'will be directly computed on the listed stimlui')

    parser.add_argument('-layer',
                        nargs = '+',
                        metavar = 'Layer',
                        type = str,
                        required = False,
                        help = 'Layers of interest. '
                                'conv, relu, pool, fc represents convolution, reLU, '
                                'pooling, and full connection layer, respectively.'
                                'Default, the top stimulis are selected for '
                                'all layers and all channels.')

    parser.add_argument('-channel',
                        nargs = '+',
                        metavar = 'Channel id list',
                        type = int,
                        required = False,
                        help = "Channel of interest. ")

    parser.add_argument('-dmask',
                        metavar = '.dmask.csv dnnmask file',
                        required = False,
                        type = str,
                        help = "A *.dmask.csv list of interested layers and channels. " )
        
    parser.add_argument('-metric',
                        choice=('max', 'mean','L1','L2'),
                        required=True,
                        type = str,
                        help='Metric for channel activation.')

    parser.add_argument('-outdir',
                        metavar='Output dir to save the top stimulus for '
                        'interested layers and channels, and assocaited '
                        'topact.hd5 file',
                        required = True,
                        type = str,
                        help = 'an output stim.hd5 file')

    args = parser.parse_args()

 

    # prepare dmask
    if args.dmask is not None and args.layer is not None:
        raise exception('dmask and layer-channel cannot be input at the same time')
    if args.dmask is None and args.layer is None:
        raise exception('Please input dmask or layer and channel pair to  '
                        'specifiy interested layers and channels') 
    if args.dmask is not None:
            dmask = dio.read_dmask_csv(args.dmask)
    else:
            dmask = dio.dnn_index_comb(layer,channel)
            
    # if act is input, select top stimulus according to activation from act file 
    if args.act is not None:
        act = dio.NetAct(args.out, dmask) 
        
    # if act file is not provided, calculate act from dnn
    else:
        # load net
        net = analyzer.Net(args.net)
        # load stim
        stim = dio.StimCSV(args.stim)
        transform = dio.Transforms('resize',net.img_size)
        stim = ImgData(stim, transform)
        # calculate activation for stim
        net = analyzer.Net(args.net)
        act = net.test(stim, dmask) # net.test return NetAct object
        
    # pooling data within each channel 
    pool_act = dnn_pool(act, args.metric)
    # sorting data
    index = dnn_sort(act, args.metric) 
    # get and save top act
    top_act = pool_act(index(:args.top)) 
    top_act.save('filename')
                  
if __name__ == '__main__':
    main()
    print('completed.')
