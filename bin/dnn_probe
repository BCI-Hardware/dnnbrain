#! /usr/bin/env python

"""
Probe DNN activation's prediction ability
"""

import argparse


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-anal',
                        metavar='Analysis',
                        required=True,
                        type=str,
                        choices=('uva', 'mva'),
                        help="uva: Do univariate analysis. "
                             "mva: Do multivariate analysis.")
    parser.add_argument('-act',
                        metavar='Activation',
                        required=True,
                        type=str,
                        help='DNN activation file')
    parser.add_argument('-layer',
                        metavar='Layer',
                        type=str,
                        nargs='+',
                        help="names of the layers which are probed "
                             "For example, 'conv1' represents the first convolution layer, and "
                             "'fc1' represents the first full connection layer. "
                             "Default is probe all layers in the DNN activation file.")
    parser.add_argument('-iteraxis',
                        metavar='Axis',
                        type=str,
                        choices=('channel', 'column'),
                        help="Iterate along the specified axis."
                             "If -anal is uva:"
                             "channel: Summarize the best ability for each channel. "
                             "column: Summarize the best ability for each column. "
                             "default: Summarize the best ability for the whole layer."
                             "If -anal is mva:"
                             "channel: Do mva using all units in each channel. "
                             "column: Do mva using all units in each column. "
                             "default: Do mva using all units in the whole layer.")
    parser.add_argument('-stim',
                        metavar='Stimulus',
                        required=True,
                        type=str,
                        help='a .stim.csv file')
    parser.add_argument('-meas',
                        metavar='Measurement',
                        type=str,
                        nargs='+',
                        help='Specify measurements as the ground truth. '
                             'Default is using all measurements in response file.')
    parser.add_argument('-model',
                        metavar='Model',
                        required=True,
                        type=str,
                        choices=('glm', 'lasso', 'svc', 'lrc'),
                        help='Select a model to do prediction. '
                             'Use glm (general linear model) for regression. '
                             'Use lasso (lasso regression) for regression. '
                             'Use svc (support vector machine) for classification. '
                             'Use lrc (logistic regression) for classification.')
    parser.add_argument('-cvfold',
                        metavar='FoldNumber',
                        type=int,
                        default=3,
                        help='cross validation fold number')
    parser.add_argument('-out',
                        metavar='Output',
                        required=True,
                        type=str,
                        help='an output directory')
    args = parser.parse_args()


if __name__ == '__main__':
    main()
