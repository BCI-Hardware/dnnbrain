#! /usr/bin/env python

"""
Extract activation from DNN
"""

import argparse
import numpy as np

from torch.utils.data import DataLoader
from torchvision import transforms
from dnnbrain.dnn.io import NetLoader, ImgDataset, VidDataset, ActWriter
from dnnbrain.utils.io import read_stim_csv
from dnnbrain.dnn.analyzer import dnn_activation


def main():
    parser = argparse.ArgumentParser(description='Extract activation from DNN')
    parser.add_argument('-net',
                        metavar='Net',
                        required=True,
                        type=str,
                        help='a neural network name')
    parser.add_argument('-stim',
                        type=str,
                        required=True,
                        metavar='A csv file lists top stimuli to be used to '
                        'estimate receptive field.',
                        help='The file provide path of the top stimuli images '
    parser.add_argument('-layer',
                        metavar='Layer',
                        required=True,
                        type=str,
                        nargs='+',
                        help="names of the layers used to specify where activation is extracted from "
                             "For example, 'conv1' represents the first convolution layer, and "
                             "'fc1' represents the first full connection layer. ")
    parser.add_argument('-channel',
                        nargs='+',
                        metavar='Channel id list',
                        type=str,
                        help='Channel of interest.If no channels are specificied, '
                        'each channel will be processed. The layer and channel '
                        'should be paired together.')
                          'used to estimate receptive field.')
    parser.add_argument('-dmask',
                        metavar='.dmask.csv dnnmask file',
                        required=True,
                        type=str,
                        help='A .dmask.csv file in which layers and channel of '
                        'interest are listed')
    parser.add_argument('-out',
                        metavar='Output',
                        required=True,
                        type=str,
                        help='an output filename with suffix .act.h5')
    args = parser.parse_args()
    
            # prepare dmask
    if args.dmask is not None and args.layer is not None:
        raise exception('dmask and layer options cannot be used at the same time')
    if args.dmask is None and args.layer is None:
        raise exception('Please use dmask or layer and channel pair to  '
                        'specifiy target layers and channels')
               
    dmask = dio.DnnMask('mymask')
    if args.dmask is not None:
            dmask.load(args.dmask)
    else:
            dmask.set(layer,channel)
    
    # load stim
    stim = dio.Stim(args.stim)
    transform = dio.Transforms('resize',net.img_size)
    stim = ImgData(stim, transform)


    # calcualte difference map for each stim, and save it to disk
    net = analyzer.Net(args.net)
    act = net.test(stim, dmask) 
    act.save('myfile')
    
if __name__ == '__main__':
    main()
