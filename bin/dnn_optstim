#! /usr/bin/env python

"""
Optimized stimuli synthesis for interested channels using activation maximization
"""


#import some packages needed
import argparse
from PIL import Image
from dnnbrain.dnn import representation
from dnnbrain.dnn import io as dnn_io


def main():
    parser = argparse.ArgumentParser(description='Optimized stimuli synthesis for '
                                     'interested channels using activation maximization')
    parser.add_argument('-net',
                        type = str,
                        required = True,
                        metavar='Name of interested DNN',
                        choices=['alexnet','vgg11','vgg16','vgg19'],
                        help = 'Name of interested DNN')
    parser.add_argument('-layer',
                        nargs='+',
                        metavar='Layer',
                        type=str,
                        help='Layers of interest. '
                             'conv, relu, pool, fc represents convolution, reLU, '
                             'pooling, and fc layer, respectively.The top stimulis '
                             'are selected for all layers and channels default.')
    parser.add_argument('-channel',
                        nargs='+',
                        metavar='Channel id list',
                        type=str,
                        help='Channel of interest')
    parser.add_argument('-dmask',
                        metavar='.dmask.csv dnnmask file',
                        required=True,
                        type=str,
                        help='A .dmask.csv file in which layers and channel of '
                        'interest are  listed')
    # The option layer and channle is exclusive to the dbmask. If layer and channel
    # The user can not use the two set of parameters at the same time.
    
    parser.add_argument('-outdir',
                        type = str,
                        required = True,
                        metavar='Outputdir',
                        help = 'Output directory to save the synthesized image.')
    
    args = parser.parse_args()
      
    netloader = dnn_io.NetLoader(args.net)
    
    for param in netloader.model.parameters():
        param.requires_grad = False 
    
    layer_vis = representation.CNNLayerVisualization(netloader.model.features, netloader.layer2indices[args.layer][1], args.channel)
    
    try:
        layer_vis.visualise_layer_with_hooks(args.net, 51, args.outdir, args.unit)
        im = Image.fromarray(layer_vis.created_image)
        im.save(args.outdir)
    except:
        layer_vis.visualise_layer_with_hooks(args.net, 51, args.outdir)
        im = Image.fromarray(layer_vis.created_image)
        im.save(args.outdir)
    
    
if __name__ == '__main__':
    main()
