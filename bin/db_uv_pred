#! /usr/bin/env python

"""
Univariate prediction analysis

Author: Taicheng Huang @ BNU
Email: taicheng_huang@mail.bnu.edu.cn
Reviewer:
"""

import argparse
import os
from dnnbrain.dnn import analyzer
from dnnbrain.dnn import io as dnn_io
from dnnbrain.brain import io as brain_io
import numpy as np
import pandas as pd
from nipy.modalities.fmri import hrf
from sklearn import linear_model, model_selection

def main():
    parser = argparse.ArgumentParser(description='Univariately predict brain activation/behavior response from CNN activation')
    parser.add_argument('-net',
                        type=str,
                        required=True,
                        metavar='NetName',
                        help='convolutional network name')
    parser.add_argument('-layer',
                        type=str,
                        required=True,
                        metavar='LayerName',
                        help="The name of the layer whose activation is used to predict brain activity. "
                             " For example, 'conv1' represents the first convolution layer, and "
                             " 'fc1' represents the first full connection layer.")
    parser.add_argument('-axis',
                        type=str,
                        default='channel',
                        metavar='Axis',
                        choices=['channel', 'column'],
                        help="Ways to perform unvariate prediction analysis. Please select 'channel' or "
                              "'column' on it. 'channel': feedback label with the maximum prediction accuracy"
                              "across each channel. 'column': feedback label with the maximum predict accuracy"
                              "across each column.")
    parser.add_argument('-stim',
                        type=str,
                        required=True,
                        metavar='StimuliInfoFile',
                        help='table contains picture names, conditions and picture onset time.\
                              This csv_file helps us connect cnn activation to brain images.\
                              Please organize your information as:\
                              [PicPath]\
                              stimID            condition   onset(optional) measurement(optional)\
                              face/face1.png    face        1.1             3\
                              face/face2.png    face        3.1             5\
                              scene/scene1.png  scene       5.1             4')
    parser.add_argument('-model',
                        type=str,
                        required=True,
                        metavar='Model',
                        choices=['lmr', 'lmc'],
                        help="Univariate prediction model, for regression analysis please use"
                             "lmr (linear model regression), for classification analysis please"
                             "use lmc (logistic regression)")
    parser.add_argument('-hrf',
                         type=str,
                         default='none'
                         metavar='HRF',
                         choices=['spmt', 'dspmt', 'ddspmt', 'none'],
                         help='Hemodynamic response functions. We provide SPM canonical HRF (spmt),'
                              'SPM canonical HRF derivative function(dspmt), SPM canonical HRF dispersion'
                              'function (ddspmt) or do not use HRF function (none). By default is none.')
    parser.add_argument('-response',
                        type=str,
                        required=True,
                        metavar='Response',
                        help='brain response, could be extracted activation file (.csv generated from db_brain_roi)'
                             'or brain nifti/cifti files (.nii.gz or .dscalar.nii). If the input brain response is'
                             'an imaging data, please give a mask in -mask.')
    parser.add_argument('-mask',
                        type=str,
                        required=False,
                        metavar='Mask',
                        help='brain mask. Only use when use imaging data (.nii.gz or .dscalar.nii) in -respone.')
    parser.add_argument('-cvfold',
                        type=int,
                        default=2,
                        metavar='FoldNumber',
                        help='cross validation fold number.')
    parser.add_argument('-outdir',
                        type=str,
                        required=True,
                        metavar='OutputDir',
                        help='Output directory. output data will stored as the following directory:'
                             'layer/[channel/column]/accuracy, maxmum_cooredinate')
    
    args = parser.parse_args()
    
    # Get CNN activation
    netloader = dnn_io.NetLoader(args.net)
    imgcropsize = netloader.img_size
     
    transform = transforms.Compose([transforms.Resize(imgcropsize),
                                    transforms.ToTensor()])                            
    picdataset = dnn_io.PicDataset(args.stim, transform=transform)
    picdataloader = DataLoader(picdataset, batch_size=8, shuffle=False)
        # dnn_act: pic * channel * unit * unit
    dnn_act = analyzer.dnn_activation(picdataloader, args.net, args.layer)
    dnn_act = dnn_act.reshape(n_pic, n_channel, -1)
    # HRF
    if args.hrf == 'spmt':
        dnn_act = hrf.spmt(dnn_act)
    elif args.hrf == 'dspmt':
        dnn_act = hrf.dspmt(dnn_act)
    elif args.hrf == 'ddspmt':
        dnn_act = hrf.ddspmt(dnn_act)
    else:
        pass
    
    n_pic = dnn_act.shape[0]
    n_channel = dnn_act.shape[1]
    n_unitx = dnn_act.shape[2]
    n_unity = dnn_act.shape[3]
    
    # Load brain response
        # brain response suffix
    brainimg_suffix = '.'.join(args.response.split('.')[1:])
    if args.response.endswith('csv'):
        assert args.mask is None, "Loading .csv response does not need a mask."
        # npic * ROIs
        brainact_pd = pd.read_csv(args.response)
        brain_act = brainact_pd.values
        roi_keys = brainact_pd.keys()
    elif args.respose.endswith('nii'):
        # Load brain images
        brain_act_raw, header = brain_io.load_brainimg(args.response)
        assert args.mask is not None, "Loading brain images needs a mask."
        assert args.mask.split('.')[-1] == args.response.split('.')['-1'], "Suffix of response and mask should be same."
        brain_mask, _ = brain_io.load_brainimg(args.mask, ismask=True)
        brain_mask[brain_mask!=0] = 1    
        brain_mask = np.tile(brain_mask[None,...], (brain_act_raw.shape[0],1,1,1))
        brainimg_act = brain_act_raw*brain_mask
        brainact_idx = np.transpose(np.where(brain_mask!=0))
        # Flatten brainimage as (npic * nvoxel) array
        brain_act = np.zeros((brain_act_raw.shape[0], brainact_idx.shape[0]))
        for i, b_idx in enumerate(brainact_idx):
            brain_act[:, i] = brain_act_raw[:, b_idx[0], b_idx[1], b_idx[2]]
    else:
        raise Exception('Not support yet, please contact to the author for implementation.')
    roisize = brain_act.shape[1]
    
    # Prepare model
    if args.model == 'lmr':
        model = linear_model.LinearRegression()
        score_evl = 'explained_variance'
    elif args.model == 'lmc':
        if args.response.endswith('nii'):
            raise Exception('Classification is not supported with input as brain images.')
        model = linear_model.LogisticRegression()
        score_evl = 'accuracy'
    else:
        raise Exception('Please select lmr or lmc for univariate prediction analysis.')
    
    # Perform univariate prediction analysis
    if args.axis == 'channel':
        # nchannel * nvoxel
        acc_array = np.zeros((n_channel, roisize))
        accpos_array = np.zeros_like(acc_array)
        for i in range(roisize):
            print('voxel {}'.format(i+1))
            for nc in range(n_channel):
                scores_tmp = []
                for ux in range(n_unitx*n_unity):
                    scores_tmp.append(model_selection.cross_val_score(model, dnn_act[:,nc,ux][:,None], brain_act[:,i][:, None], scoring=score_evl, cv=args.cvfold))
                acc_array[nc,i] = np.max(scores_tmp)
                # Count coordinate from 1.
                accpos_array[nc,i] = np.argmax(scores_tmp)+1
    elif args.axis == 'column':
        # nunit * nvoxel
        acc_array = np.zeros((n_unitx*n_unity, roisize))
        accpos_array = np.zeros_like(acc_array)
        for i in range(roisize):
            print('voxel {}'.format(i+1))
            for ux in range(n_unitx*n_unity):
                scores_tmp = []
                for nc in range(n_channel):
                    scores_tmp.append(model_selection.cross_val_score(model, dnn_act[:,nc,ux][:,None], brain_act[:,i][:, None], scoring=score_evl, cv=args.cvfold))
                acc_array[ux,i] = np.max(scores_tmp)
                # Count coordinate from 1.
                accpos_array[ux,i] = np.argmax(scores_tmp)+1
    else:
        raise Exception('Please input channel or column in -axis')
            
    if args.response.endswith('nii'):
        acc_brainimg = np.zeros((n_channel, *brain_act_raw.shape[1:]))
        accpos_brainimg = np.zeros_like(acc_brainimg)
        for i, vx_idx in enumerate(brainact_idx):
            acc_brainimg[:, vx_idx[0], vx_idx[1], vx_idx[2]] = acc_array[:,i]
            accpos_brainimg[:, vx_idx[0], vx_idx[1], vx_idx[2]] = accpos_array[:,i]
            
    # Save files
    if not os.path.isdir(os.path.join(args.outdir, 'layer')):
        os.mkdir(os.path.join(args.outdir, 'layer'))
    if args.axis == 'channel':
        if not os.path.isdir(os.path.join(args.outdir, 'layer', 'channel')):
            os.mkdir(os.path.join(args.outdir, 'layer', 'channel'))
        if args.response.endswith('csv'):
            acc_pd = pd.DataFrame(acc_array, columns=roi_keys)
            accpos_pd = pd.DataFrame(accpos_array, columns=roi_keys)
            acc_pd.to_csv(os.path.join(args.outdir, 'layer', 'channel', 'accuracy.csv'), index=False)
            accpos_pd.to_csv(os.path.join(args.outdir, 'layer', 'channel', 'accuracy_pos.csv'), index=False)
        elif args.response.endswith('nii'):
            brain_io.save_brainimg(os.path.join(args.outdir, 'layer', 'channel', 'accuracy.'+brainimg_suffix, acc_brainimg, header))
        else:
            raise Exception('Not support yet, please contact to the author for implementation.')
    elif args.axis == 'column':
        if not os.path.isdir(os.path.join(args.outdir, 'layer', 'column')):
            os.mkdir(os.path.join(args.outdir, 'layer', 'column'))
        if args.response.endswith('csv'):
            acc_pd = pd.DataFrame(acc_array, columns=roi_keys)
            accpos_pd = pd.DataFrame(accpos_array, columns=roi_keys)
            acc_pd.to_csv(os.path.join(args.outdir, 'layer', 'column', 'accuracy.csv'), index=False)
            accpos_pd.to_csv(os.path.join(args.outdir, 'layer', 'column', 'accuracy_pos.csv'), index=False)
        elif args.response.endswith('nii'):
            brain_io.save_brainimg(os.path.join(args.outdir, 'layer', 'column', 'accuracy.'+brainimg_suffix, acc_brainimg, header))
        else:
            raise Exception('Not support yet, please contact to the author for implementation.')
    else:
        raise Exception('Please input channel or column in -axis')
            
if __name__ == "__main__":
    main()