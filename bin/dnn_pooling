#! /usr/bin/env python

"""
Pooling DNN activation for each channel
"""

import argparse

from dnnbrain.dnn.io import ActReader, ActWriter
from dnnbrain.dnn.analyzer import dnn_pooling


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-act',
                        metavar='Activation',
                        required=True,
                        type=str,
                        help='DNN activation file')
    parser.add_argument('-layer',
                        nargs='+',
                        metavar='Layer',
                        type=str,
                        help="Layers of interest. "
                             "E.g., 'conv1' represents the first convolution layer, "
                             "and 'fc1' represents the first full connection layer. "
                             "Default is to do pooling for all layers "
                             "in the activation file.")
    parser.add_argument('-meth',
                        metavar='Method',
                        required=True,
                        type=str,
                        choices=('max', 'mean', 'median'),
                        help='Pooling method: '
                             'max: max pooling; '
                             'mean: mean pooling; '
                             'median: median pooling.')
    parser.add_argument('-out',
                        metavar='Output',
                        required=True,
                        type=str,
                        help='an output filename with suffix .act.h5')
    args = parser.parse_args()

    # pooling DNN activation
    reader = ActReader(args.act)
    writer = ActWriter(args.out, reader.title + ' pooling')
    layers = reader.layers if args.layer is None else args.layer
    for layer in layers:
        writer.set_act(layer, dnn_pooling(reader.get_act(layer), args.meth))

    reader.close()
    writer.close()


if __name__ == '__main__':
    main()
