"""
Use CNN activation to recibstruct pictures
Author: Yang Anmin and Zhang Yiyuan @ BNU
"""

import os
import numpy as np
import argparse
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt
from dnnbrain.dnn import io as dnn_io
from dnnbrain.dnn import representation


def main():
    parser = argparse.ArgumentParser(description='Visualize what a channel sees in the image')
    
    parser.add_argument('-net',
                        type=str,
                        required = True,
                        choices=['alexnet', 'vgg11'],
                        metavar = 'NetName',
                        help ="a pretrained neural network's name such as 'alexnet' and 'vgg11'")
    
    parser.add_argument('-stim',
                        type=str,
                        required=True,
                        metavar='picture stimuli csv',
                        help='table contains picture names, conditions and picture onset time.\
                              This csv_file helps us connect cnn activation to brain images.\
                              Please organize your information as:\
                              [PicPath]\
                              stimID     condition   onset(optional) measurement(optional)\
                              face1.png  face        1.1             3\
                              face2.png  face        3.1             5\
                              scene1.png scene       5.1             4'
                        )
    
    parser.add_argument('-layer',
                        type=str,
                        required=True,
                        metavar='Layer',
                        help="The name of the layer which is connected to predict brain activity."
                             "For example, 'conv1' represents the first convolution layer, and"
                             "'fc1' represents the first full connection layer.")
    
    parser.add_argument('-channel',
                        type=int,
                        required = True,
                        metavar = 'ChannelNumber',
                        help = "The sequence numbers of out channels of the selected layer"
                               "If not specificly interested in one or a few channels, that is you are interested only in layer, the sequence number is 0.")
    
    parser.add_argument('-unit',
                        type=int,
                        required = False,
                        metavar = 'unitNumber',
                        help = "position for a specific unit")
    
    parser.add_argument('-out',
                        type=str,
                        required = True,
                        metavar = 'OutputDir',
                        help = 'out in this dir')
    
    args = parser.parse_args()

    # select net
    netloader = dnn_io.NetLoader(args.net)
    model = netloader.model

    # real layer in CNN
    cnn_layer = netloader.layer2indices[args.layer][1]

    picdataset = dnn_io.PicDataset(args.stim, transform=None)
    picdataloader = DataLoader(picdataset, batch_size=1, shuffle=False)
    
    try:
        x_top, x_bottom, y_top, y_bottom = representation.RF_position(model, cnn_layer, args.unit)
    except:
        pass
    
    unit = args.unit
    if unit:
        for picname, picimg, _ in picdataloader:
            out_image = representation.layer_channel_reconstruction(model, picimg, cnn_layer, args.channel)
            out_image = np.array(out_image)
            out_image = out_image[x_top:x_bottom, y_top:y_bottom, :]
            imgname = args.layer+'_'+str(args.channel)+'_'+str(unit)+'_'+picname
            outpath = os.path.join(args.out, imgname)
            plt.figure()
            plt.imsave(outpath, out_image)
    else:
        for picname, picimg, _ in picdataloader:
            out_image = representation.layer_channel_reconstruction(model, picimg, cnn_layer, args.channel)
            out_image = np.array(out_image)
            imgname = args.layer+'_'+str(args.channel)+'_'+picname
            outpath = os.path.join(args.out, imgname)
            plt.figure()
            plt.imsave(outpath, out_image)
                

if __name__ == '__main__':
    main()

    
