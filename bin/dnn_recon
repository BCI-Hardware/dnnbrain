#! /usr/bin/env python

"""
Reconstruct the stimuli image using DNN activation of interested layers/channels
"""

import os
import numpy as np
import argparse
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt
from dnnbrain.dnn import io as dnn_io
from dnnbrain.dnn import representation


def main():
    parser = argparse.ArgumentParser(description='Reconstruct the stimuli image '
                                     'using DNN activation of interested layers/channels')    
    parser.add_argument('-net',
                        type = str,
                        required = True,
                        metavar='Name of target DNN',
                        choices=['alexnet','vgg11','vgg16','vgg19'],
                        help = 'Name of interested DNN')
    parser.add_argument('-act',
                        metavar='DNN .act.h5 file',
                        required=False,
                        type=str,
                        help='The DNN activation to be reconstructed')
    parser.add_argument('-layer',
                        nargs='+',
                        metavar='Layer id list',
                        type=str,
                        help='Layers of interest. '
                             'conv, relu, pool, fc represents convolution, reLU, '
                             'pooling, and fc layer, respectively.The top stimulis '
                             'are selected for all layers and channels default.')
    parser.add_argument('-channel',
                        nargs='+',
                        metavar='Channel id list',
                        type=str,
                        help='Channel of interest.If no channels are specificied, '
                        'each channel will be processed. The layer and channel '
                        'should be one-to-one paired together in the order.')
    parser.add_argument('-dmask',
                        metavar='.dmask.csv dnnmask file',
                        required=False,
                        type=str,
                        help='A .dmask.csv file in which layers and channel of '
                        'interest are listed')
    parser.add_argument('-outdir',
                        type = str,
                        required = True,
                        metavar='Outputdir',
                        help = 'Output directory to save the reconstructed image.')
    
    args = parser.parse_args()

    # select net
    netloader = dnn_io.NetLoader(args.net)
    model = netloader.model

    # real layer in CNN
    cnn_layer = netloader.layer2indices[args.layer][1]

    picdataset = dnn_io.PicDataset(args.stim, transform=None)
    picdataloader = DataLoader(picdataset, batch_size=1, shuffle=False)
    
    try:
        x_top, x_bottom, y_top, y_bottom = representation.RF_position(model, cnn_layer, args.unit)
    except:
        pass
    
    unit = args.unit
    if unit:
        for picname, picimg, _ in picdataloader:
            out_image = representation.layer_channel_reconstruction(model, picimg, cnn_layer, args.channel)
            out_image = np.array(out_image)
            out_image = out_image[x_top:x_bottom, y_top:y_bottom, :]
            imgname = args.layer+'_'+str(args.channel)+'_'+str(unit)+'_'+picname
            outpath = os.path.join(args.out, imgname)
            plt.figure()
            plt.imsave(outpath, out_image)
    else:
        for picname, picimg, _ in picdataloader:
            out_image = representation.layer_channel_reconstruction(model, picimg, cnn_layer, args.channel)
            out_image = np.array(out_image)
            imgname = args.layer+'_'+str(args.channel)+'_'+picname
            outpath = os.path.join(args.out, imgname)
            plt.figure()
            plt.imsave(outpath, out_image)
                

if __name__ == '__main__':
    main()

    
