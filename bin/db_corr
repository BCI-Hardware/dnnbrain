#! /usr/bin/env python

"""
Correlate DNN activation with brain or behavior response
"""

import os
import time
import argparse
import numpy as np
import pandas as pd

from os.path import join as pjoin
from dnnbrain.dnn.core import Activation
from dnnbrain.brain.core import ROI, BrainEncoder
from dnnbrain.brain.io import load_brainimg, save_brainimg
from dnnbrain.utils.util import gen_dmask


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-act',
                        metavar='Activation',
                        required=True,
                        type=str,
                        help='DNN activation file')
    parser.add_argument('-layer',
                        metavar='Layer',
                        type=str,
                        nargs='+',
                        help="layer names of interest "
                             "For example, 'conv1' represents the first convolution layer, and "
                             "'fc1' represents the first full connection layer. ")
    parser.add_argument('-chn',
                        metavar='Channel',
                        type=int,
                        nargs='+',
                        help="channel numbers of interest "
                             "Default is using all channels of each layer specified by -layer.")
    parser.add_argument('-dmask',
                        metavar='DnnMask',
                        type=str,
                        help='a .dmask.csv file in which layers of interest are listed '
                             'with their own channels, rows and columns of interest.')
    parser.add_argument('-iteraxis',
                        type=str,
                        metavar='Axis',
                        choices=('channel', 'row_col'),
                        help="Iterate along the specified axis."
                             "channel: Summarize the maximal R square for each channel. "
                             "row_col: Summarize the maximal R square for each position (row_idx, col_idx). "
                             "default: Summarize the maximal R square for the whole layer.")
    parser.add_argument('-resp',
                        metavar='Response',
                        required=True,
                        type=str,
                        help='a .roi.h5/.nii file '
                             'If it is .nii file, -roi will be ignored. '
                             "All voxels' activation will be a correlate.")
    parser.add_argument('-bmask',
                        metavar='BrainMask',
                        type=str,
                        help='Brain mask is used to extract activation locally. '
                             'Only used when the response file is .nii file.')
    parser.add_argument('-roi',
                        metavar='RoiName',
                        type=str,
                        nargs='+',
                        help='Specify ROI names as the correlates. '
                             'Default is using all ROIs in .roi.h5 file.')
    parser.add_argument('-out',
                        metavar='Output',
                        required=True,
                        type=str,
                        help='R square and location saved in an output directory')
    args = parser.parse_args()

    # -Load response start-
    if args.resp.endswith('.roi.h5'):
        roi = ROI(args.resp, args.roi)
        Y = roi.data

    elif args.resp.endswith('.nii') or args.resp.endswith('.nii.gz'):
        Y, header = load_brainimg(args.resp)
        bshape = Y.shape[1:]

        # Get resp data within brain mask
        if args.bmask is None:
            bmask = np.any(Y, 0)
        else:
            bmask, _ = load_brainimg(args.bmask, ismask=True)
            assert bshape == bmask.shape, 'brain mask and brain response mismatched in space'
            bmask = bmask.astype(np.bool)
        Y = Y[:, bmask]

    else:
        raise IOError('Only .roi.h5 and nifti/cifti are supported')
    print('Finish loading response: ', args.resp)
    # -Load response end-

    # -load activation start-
    # initialize DNN mask
    if args.layer is None and args.dmask is None:
        dmask = None
    else:
        dmask = gen_dmask(args.layer, args.chn, args.dmask)
    activation = Activation()
    activation.load(args.act, dmask)
    print('Finish loading activation: ', args.act)
    # -load activation end-

    encoder = BrainEncoder(Y, 'uv', 'corr')
    time1 = time.time()
    pred_dict = encoder.encode_dnn(activation, args.iteraxis)
    print(f'Finish corr: cost {time.time()-time1} seconds')

    # --save out start--
    for layer, data in pred_dict.items():
        # prepare directory
        trg_dir = pjoin(args.out, layer)
        if not os.path.isdir(trg_dir):
            os.makedirs(trg_dir)
        if args.iteraxis is not None:
            trg_dir = pjoin(trg_dir, args.iteraxis)
            if not os.path.isdir(trg_dir):
                os.makedirs(trg_dir)

        # save files
        if args.resp.endswith('.roi.h5'):
            # save score
            score_df = pd.DataFrame(data['score'], columns=roi.rois)
            score_df.to_csv(pjoin(trg_dir, 'score.csv'), index=False)

            # save location
            chn_loc_df = pd.DataFrame(data['chn_loc'], columns=roi.rois)
            chn_loc_df.to_csv(pjoin(trg_dir, 'chn_location.csv'), index=False)
            row_loc_df = pd.DataFrame(data['row_loc'], columns=roi.rois)
            row_loc_df.to_csv(pjoin(trg_dir, 'row_location.csv'), index=False)
            col_loc_df = pd.DataFrame(data['col_loc'], columns=roi.rois)
            col_loc_df.to_csv(pjoin(trg_dir, 'col_location.csv'), index=False)

        else:
            resp_suffix = '.'.join(args.resp.split('.')[1:])

            # save score
            score_img = np.zeros((data['score'].shape[0], *bshape))
            score_img[:, bmask] = data['score']
            save_brainimg(pjoin(trg_dir, 'score.' + resp_suffix), score_img, header)

            # save location
            chn_loc_img = np.zeros_like(score_img, dtype=np.int)
            chn_loc_img[:, bmask] = data['chn_loc']
            save_brainimg(pjoin(trg_dir, 'chn_location.' + resp_suffix), chn_loc_img, header)
            row_loc_img = np.zeros_like(score_img, dtype=np.int)
            row_loc_img[:, bmask] = data['row_loc']
            save_brainimg(pjoin(trg_dir, 'row_location.' + resp_suffix), row_loc_img, header)
            col_loc_img = np.zeros_like(score_img, dtype=np.int)
            col_loc_img[:, bmask] = data['col_loc']
            save_brainimg(pjoin(trg_dir, 'col_location.' + resp_suffix), col_loc_img, header)
        print(f'Finish saving for {layer}')
    # --save out end--


if __name__ == '__main__':
    main()
